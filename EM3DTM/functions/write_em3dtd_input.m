function write_em3dtd_input(work_dir,remote_dir,wave_file,mod_in,mod_ref,beta,alpha,target,iter_per_beta,argin)
% EM3DTM octree mesh generator 
% Cycles through a list of folders and generate the input file for the
% inversion of EM3DTM data
% 
% INPUTS PARAMETERS
% work_dir: Source location of directories as generated by data_2_folder.m
% mod_in:   Initial model
% mod_ref:  Reference model
% beta:     [beta_max  beta_min  beta_factor]
% alpha:    [ alpha_s  alpha_x  alpha_y  alpha_z]
% target:   Target chi factor
% 
% OUTPUT
% TD_octree_inv.inp: Input file in each directory
% Work_list.dat: List of all line processed (saved in common directory as work_dir) 
%
% Author: D Fournier
% Last Update: April 30th, 2014

%% Driver
home_dir = pwd;

cd(work_dir)
cd '..'
root_dir  = pwd;
cd(work_dir)

obs_list = ls;

nb_obs = size(obs_list,1)-2;

line_range = argin;

switch line_range 
    case 'all'
        
       range = 1:nb_obs;
       
    otherwise
        
        range = str2num(argin);

end


fid2 = fopen([root_dir '\Work_list.dat'],'w');
% Cycle through all the lines
for oo = range
    
    
    cd (obs_list(oo+2,:))
    

        % Find the Observation and topo file
        file_list = ls;
        
        obs_file    = [];
        con_file    = [];
        mesh_big    = [];
        mesh        = [];
        
        for ii = 1:size(file_list,1)-2;

            look_at = strtrim(file_list(ii+2,:));

            if strcmp(look_at(end-3:end),'.obs')==1

                obs_file = look_at;

            end
            
            if length(look_at)>6
                if strcmp(look_at(end-6:end),'big.txt')==1

                    mesh_big = look_at;

                end

                if strcmp(look_at(end-6:end),'001.txt')==1

                    mesh = look_at;

                end
            end
            
            if strcmp(look_at(end-3:end),'.con')==1

                con_file = look_at;
                iter = str2double(look_at(5:6));
                
            end
            
            if strcmp(look_at,'TD_octree_inv.out')==1

                dos (['del ' work_dir '\' strtrim(obs_list(oo+2,:)) '\' look_at]);
                
            end
            
            if strcmp(look_at,'TD_octree_inv.log')==1

                dos (['del ' work_dir '\' strtrim(obs_list(oo+2,:)) '\' look_at]);
                
            end
            
        end
            
        if isempty(obs_file)==1
            
            fprintf(['Program could not find the obs file for line ' obs_list(oo+2,:) '\n'])
            fprintf('Make sure that the file has the right format (*.obs)\n')
            cd ..
            break
            
        end
        
        if isempty(mesh_big)==1 || isempty(mesh)==1
            
            fprintf(['Program could not find the octree mesh files for line ' obs_list(oo+2,:) '\n'])
            fprintf('Make sure to run "run_octree_mesh.m" first.\n')
            cd ..
            break
            
        end
        
        %% Write Input file
        fprintf(fid2,'%s\n',obs_list(oo+2,:));
        
        % Write Input file
        fid=fopen('TD_octree_inv.inp','w');

        fprintf(fid,'%s ! octree mesh file\n',mesh_big);
        fprintf(fid,'1 \t 0 \t 4\n');
        fprintf(fid,'%s ! octree mesh file\n',mesh);
        fprintf(fid,'%s ! observation file\n',obs_file);
        fprintf(fid,'%s%s ! waveform file\n',remote_dir,wave_file);
        if isempty(con_file)==1
            fprintf(fid,'VALUE %8.5e ! initial model\n',mod_in);
        else
            fprintf(fid,'%s ! initial model\n',con_file);
        end
        
        fprintf(fid,'VALUE %8.5e ! reference model\n',mod_ref);
        fprintf(fid,'active_cells.txt ! topo active cells file\n');
        fprintf(fid,'active_cells.txt ! user active cells file\n');
        fprintf(fid,'NO_WEIGHT ! weighting file\n');
        fprintf(fid,'NO_FACE_WEIGHT ! face weighting file\n');
        
        if isempty(con_file)==1
            fprintf(fid,'%8.5e %8.5e %8.5e ! core depth\n',beta);
        else
            fprintf(fid,'%8.5e %8.5e %8.5e ! core depth\n',beta(1)*beta(3)^(iter-5),beta(2),beta(3));
        end
        
        fprintf(fid,'%8.5e %8.5e %8.5e %8.5e ! as, ax, ay, az\n',alpha);
        fprintf(fid,'%8.5e \n',target);
        fprintf(fid,'1.e-2  1.e-3  %i      ! tol_nl  mindm  iter_per_beta\n',iter_per_beta);
        fprintf(fid,'1.e-2  0           ! tol_ipcg  max_iter_ipcg\n');
        fprintf(fid,'CHANGE_MREF   ! | NOT_CHANGE_MREF\n');
        fprintf(fid,'SMOOTH_MOD_DIF   !SMOOTH_MOD | SMOOTH_MOD_DIF\n');
        fprintf(fid,'BOUNDS_NONE   ! | BOUNDS_CONST bl bu | BOUNDS_FILE file\n');
        fclose(fid);
    
        %% Write *.pbs file

        % Write Input file
        fid3=fopen([strtrim(obs_list(oo+2,:)) '.pbs'],'w');
        fprintf(fid3,'#PBS -l nodes=1:ppn=4\n');
        fprintf(fid3,'cd $PBS_O_WORKDIR\n');
        fprintf(fid3,'#cat $PBS_NODEFILE >nodes.txt\n');
        fprintf(fid3,'export OMP_NUM_THREADS=4\n');
        fprintf(fid3,'TDoctreeinv TD_octree_inv.inp\n');
        fclose(fid3);
        
        cd ..
end
fclose(fid2);
cd(home_dir);